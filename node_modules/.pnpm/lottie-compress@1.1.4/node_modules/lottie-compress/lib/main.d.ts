/// <reference types="node" />
interface IOptions {
    quality: [number, number];
    tinypngKey?: string;
}
export default class LottieCompress {
    lottieJson: any;
    options: IOptions;
    constructor(lottieJson: any, options?: any);
    /**
     * execute
     */
    execute(): Promise<any>;
    /**
     * Lottie file compression base64 resource files
     * @param lottieFile lottieFile
     * @param options options config
     */
    miniBase64(): Promise<any>;
    /**
     * 压缩文件中的冗余字符/属性
     * @param {*} data lottie.json
     * @return {*} new data lottie.json
     */
    getMiniAttr(): any;
    /**
     * 单个base64的图片压缩
     * @param {string} stream base64的图片
     * @param {string} fileds .quality压缩比例
     * @return {string} 压缩以后的图片
     */
    tinybase64(stream: any, fileds: any): Promise<any>;
    getJsonStream(stream: any): Promise<any>;
    getStream(stream: any): Promise<Buffer>;
    /**
     * 10进制转化到64进制
     * @param {number} number 10进制数值
     * @return {string} 64进制
     */
    _string10to62(number: number): string;
    /**
     * 简单循环
     * @param {object} obj lottie.json.items
     * @return {Array} 数组
     */
    _loops(obj: any): string[];
    /**
     * 循环剥离
     * @param {object} obj lottie.json
     * @param {Array} attrNames 需要剥离的属性
     * @return {object} 循环剥离
     */
    _loopsAttr(obj: any, attrNames: any): {};
    /**
     * 获取特定属性的值列表
     * @param {object} obj 对象
     * @param {Array} attrNames 属性名
     * @return {object} 清洗以后的数组对象
     */
    _getMinAttrList(obj: any, attrNames: any): {};
    /**
     * 构建需要重新赋值的对象
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @return {object} 清洗以后的对象
     */
    _getValueMap(obj: any, attrNames: any): {};
    /**
     * 浮点数字保留小数点后n位(四舍五入)
     * @param {number} num 数字
     * @param {number} n 位数
     * @return {number} 返回截取以后的数值
     */
    _cutNumber(num: any, n?: any): any;
    /**
     * 颜色的保留值，保证数值尽可能是统一的rgb。
     * @param {number} num 数字
     * @return {number} 返回截取以后的数值
     */
    _cutColorNumber(num: any): any;
    /**
     * 更换指定属性的内容
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @param {*} value 赋值，默认是undefined(删除)
     * @return {object} 结果
     */
    _resetAttr(obj: any, attrNames: any, value?: object): any;
    /**
     * 浮点类型的缩短字节数
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @param {Number} cut 保留小数点后几位 5为保留小数点后三位
     * @return {object} 结果
     */
    _resetToTi(obj: any, attrNames: any): any;
    /**
     * 数字合并,数字的近似位压缩
     * @param {object} obj lottie.json
     * @return {object} 结果
     */
    combNumber(obj: any): any;
    /**
     * 属性值的压缩
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @return {object} returnobj lottie.json
     */
    attrZip(obj: any, attrNames: any): any;
    /**
     * 关联性属性值的压缩
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @return {object} returnobj lottie.json
     */
    attrEqualZip(obj: any, attrNames: any): any;
    /**
     * 数值类型的压缩
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @return {object} returnobj lottie.json
     */
    attrMiniNumber(obj: any, attrNames: any): any;
    /**
     * 删除属性
     * @param {object} obj lottie.json
     * @param {Array} attrNames 属性名
     * @return {object} returnobj lottie.json
     */
    deleteAttr(obj: any, attrNames: any): any;
    /**
     * 修复json中layer缺乏ind的问题，避免部分ios播放器闪退
     * @param {object} obj lottie.json
     * @return {object} returnobj lottie.json
     */
    fixAttrIndIsUndefined(obj: any): any;
}
export {};
